{"version":3,"sources":["components/Course/times.js","components/Course/Course.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["terms","F","W","S","days","getCourseTerm","course","id","charAt","timeConflict","course1","course2","days1","days2","some","day","includes","hours1","hours","hours2","Math","max","start","min","end","hasConflict","selected","selection","Course","state","data-cy","color","onClick","toggle","disabled","slice","getCourseNumber","title","TermSelector","Group","hasAddons","Object","values","map","value","key","term","setTerm","CourseList","courses","useState","setSelected","x","filter","y","concat","useSelection","termCourses","Fragment","meetsPat","Banner","addCourseTimes","meets","exec","match","hh1","mm1","hh2","mm2","timeParts","addScheduleTimes","schedule","App","setSchedule","useEffect","a","fetch","response","ok","json","fetchSchedule","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7a70335.chunk.js","sourcesContent":["const terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\nconst days = ['M', 'Tu', 'W', 'Th', 'F'];\n\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst getCourseNumber = course => (\n  course.id.slice(1, 4)\n)\n\nconst daysOverlap = (days1, days2) => ( \n  days.some(day => days1.includes(day) && days2.includes(day))\n);\n\nconst hoursOverlap = (hours1, hours2) => (\n  Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end)\n);\n\nconst timeConflict = (course1, course2) => (\n  daysOverlap(course1.days, course2.days) && hoursOverlap(course1.hours, course2.hours)\n);\n\nconst courseConflict = (course1, course2) => (\n  course1 !== course2\n  && getCourseTerm(course1) === getCourseTerm(course2)\n  && timeConflict(course1, course2)\n);\n\nconst hasConflict = (course, selected) => (\n  selected.some(selection => course !== selection && courseConflict(course, selection))\n);\n\nconst buttonState = selected => (\n  selected ? `success` : null\n)\n\nexport { buttonState, getCourseNumber, getCourseTerm, hasConflict };","import React from 'react';\nimport \"rbx/index.css\";\nimport { Button } from \"rbx\";\nimport { buttonState, getCourseNumber, getCourseTerm, hasConflict } from './times.js';\n  \nconst Course = ({ course, state }) => (\n  <Button\n      data-cy=\"course\"\n      color={ buttonState(state.selected.includes(course)) }\n      onClick={ () => state.toggle(course) }\n      disabled={ hasConflict(course, state.selected) }\n      >\n      { getCourseTerm(course) } CS { getCourseNumber(course) }: { course.title }\n  </Button>\n);\n\nexport default Course;","import React, { useState } from 'react';\nimport \"rbx/index.css\";\nimport { Button } from \"rbx\";\nimport Course from './Course';\n\nconst terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\n\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst buttonState = selected => (\n  selected ? `success` : null\n)\n\nconst TermSelector = ({ state }) => (\n  <Button.Group hasAddons>\n    {Object.values(terms)\n      .map(value =>\n        <Button key={value}\n          data-cy={value}\n          color={buttonState(value === state.term)}\n          onClick={() => state.setTerm(value)}\n        >\n          {value}\n        </Button>\n      )\n    }\n  </Button.Group>\n);\n\nconst useSelection = () => {\n  const [selected, setSelected] = useState([]);\n  const toggle = (x) => {\n    setSelected(selected.includes(x) ? selected.filter(y => y !== x) : [x].concat(selected))\n  };\n  return [ selected, toggle ];\n};\n\nconst CourseList = ({ courses }) => {\n  const [term, setTerm] = useState('Fall');\n  const [selected, toggle] = useSelection();\n  const termCourses = courses.filter(course => term === getCourseTerm(course));\n  \n  return (\n    <React.Fragment>\n      <TermSelector state={ { term, setTerm } } />\n      <Button.Group>\n          { termCourses.map(course =>\n            <Course key={ course.id } course={ course } state={ { selected, toggle } } />) }\n      </Button.Group>\n    </React.Fragment>\n  );\n};\n\nexport default CourseList;","import React, { useState, useEffect} from 'react';\nimport \"rbx/index.css\";\nimport { Container, Title } from 'rbx';\nimport CourseList from './components/CourseList';\n\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\n\nconst Banner = ({ title }) => (\n  <Title>{ title || '[loading...]' }</Title>\n);\n\nconst timeParts = meets => {\n  const [match, days, hh1, mm1, hh2, mm2] = meetsPat.exec(meets) || [];\n  return !match ? {} : {\n    days,\n    hours: {\n      start: hh1 * 60 + mm1 * 1,\n      end: hh2 * 60 + mm2 * 1\n    }\n  };\n};\n\nconst addCourseTimes = course => ({\n  ...course,\n  ...timeParts(course.meets)\n});\n\nconst addScheduleTimes = schedule => ({\n  title: schedule.title,\n  courses: schedule.courses.map(addCourseTimes)\n});\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({ title: '', courses: [] });\n  const url = 'https://courses.cs.northwestern.edu/394/data/cs-courses.php';\n\n  useEffect(() => {\n    const fetchSchedule =  async () => {\n      const response = await fetch(url);\n      if (!response.ok) throw response;\n      const json = await response.json();\n      setSchedule(addScheduleTimes(json));\n    }\n    fetchSchedule();\n  }, [])\n\n  return (\n    <Container>\n      <Banner title={ schedule.title } />\n      <CourseList courses={ schedule.courses } />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}